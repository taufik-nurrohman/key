extends _index.pug

block state
  - const title = 'Key ' + version
  - const theme = '#000'
  - const scripts = ['index.js']

block script
  script
    | const map = new K;
    | const source = document.querySelector('#in'),
    |       test = document.querySelector('#out');
    |
    | map.commands.bold = function() {
    |     return console.log('Bold function goes here…'), false;
    | };
    |
    | map.commands.insertLink = function(href) {
    |     let value = window.prompt('URL:', href);
    |     if (value) {
    |         console.log('Link function goes here…');
    |         console.info('Current link value is: ' + value);
    |     }
    |     return false;
    | };
    |
    | map.keys['Control-a'] = function() {};
    | map.keys['Control-b'] = 'bold';
    | map.keys['Control-c'] = function() {};
    | map.keys['Control-i'] = 'italic';
    | map.keys['Control-k'] = ['insertLink', ['http://']];
    | map.keys['Control-v'] = function() {};
    | map.keys['Control-x'] = function() {};
    |
    | source.addEventListener('blur', e => map.pull());
    | source.addEventListener('input', e => map.pull());
    |
    | let debounce;
    | source.addEventListener('keydown', e => {
    |     map.push(e.key);
    |     let command = map.command();
    |     let value = map.fire(command);
    |     test.style.color = null !== value ? '#090' : '#900';
    |     test.innerHTML = '<b>' + map + '</b> (command' + (null !== value ? "" : ' does not') + ' exist)';
    |     if (false === value) {
    |         e.preventDefault();
    |     }
    |     debounce && clearTimeout(debounce);
    |     debounce = setTimeout(() => map.pull(), 1000);
    | });
    |
    | source.addEventListener('keyup', e => map.pull(e.key));

block style
  style
    | * {
    |   box-sizing: border-box;
    | }
    | :root {
    |   background: #fff;
    |   border-top: 4px solid;
    |   color: #000;
    |   font: normal normal 16px/1.25 serif;
    | }
    | a {
    |   color: #009;
    |   text-decoration: none;
    | }
    | a, code {
    |   word-wrap: break-word;
    | }
    | code {
    |   font-family: monospace;
    |   font-size: 80%;
    | }
    | footer, header, main, nav {
    |   margin: 0 auto;
    |   max-width: 700px;
    | }
    | hr {
    |   border: 0;
    |   border-top: 1px dashed;
    |   color: inherit;
    |   height: 0;
    | }
    | pre {
    |   white-space: pre-wrap;
    |   word-wrap: break-word;
    | }
    | pre code {
    |   background: #eee;
    |   display: block;
    |   padding: 1em;
    | }
    | table {
    |   width: 100%;
    | }
    | td, th {
    |   text-align: left;
    |   vertical-align: top;
    | }
    | [role='alert'] {
    |   background: #ffa;
    |   border: 1px dashed;
    |   margin-top: 0;
    |   padding: .75em 1em;
    | }

block content
  p(role='alert') Do you like this project? Please support my #[a(href='https://github.com/mecha-cms') Mecha CMS] project too. Thank you!
  header
    h1= title
    p Micro JavaScript #[em hotkey]/#[em keymap] system.
    hr
  main
    p
      input#in(type='text')
    p
      span#out Type something&hellip;
    h2 Features
    ul
      li Light-weight, no dependencies.
      li Simple #[abbr(title='Application Programming Interface') API]. Easy to master.
    h2 Usage
    h3 Browser
    pre: code
      | &lt;!DOCTYPE html&gt;
      | &lt;html dir="ltr"&gt;
      |   &lt;head&gt;
      |     &lt;meta charset="utf-8"&gt;
      |   &lt;/head&gt;
      |   &lt;body&gt;
      |     &lt;p&gt;
      |       &lt;textarea&gt;&lt;/textarea&gt;
      |     &lt;/p&gt;
      |     &lt;script src="#[a(href='index.min.js' target='_blank') ./index.min.js]"&gt;&lt;/script&gt;
      |     &lt;script&gt;
      |       const map = new K;
      |       const source = document.querySelector('textarea');
      |       source.addEventListener('blur', e =&gt; map.pull()); // Reset!
      |       source.addEventListener('input', e =&gt; map.pull()); // Reset!
      |       let debounce;
      |       source.addEventListener('keydown', e =&gt; {
      |           map.push(e.key);
      |           console.log(map.toString());
      |           debounce && clearTimeout(debounce);
      |           debounce = setTimeout(() => map.pull(), 1000); // Reset after 1 second idle!
      |       });
      |       source.addEventListener('keyup', e =&gt; map.pull(e.key));
      |     &lt;/script&gt;
      |   &lt;/body&gt;
      | &lt;/html&gt;
    h3 Node.js
    p Functions and methods in this application are mostly native JavaScript and are intended for use by the browser. Node.js doesn&rsquo;t know about the DOM, so this kind of practice will probably be used more often to build new browser packages than to be used directly in the Node.js server.
    h4 CommonJS
    pre: code
      | const K = require('@taufik-nurrohman/key').default;
      |
      | const map = new K;
    h4 ECMAScript
    pre: code
      | import K from '@taufik-nurrohman/key';
      |
      | const map = new K;
    h2 Examples
    ul
      li: a(href='tweak/sequence.html') Sequential Keys
    h2 Settings
    table(border='1')
      thead
        tr
          th Name
          th Description
      tbody
        tr
          td: code source
          td The object that will becomes the #[code this] context in the command.
    pre: code
      | const map = new K(source = {});
    h2 Methods and Properties
    h3 map.command()
    p Test if current key combination exists.
    pre: code
      | source.addEventListener('keydown', e => {
      |     map.push(e.key);
      |     let command = map.command();
      |     if (command) {
      |         console.log(command);
      |     }
      | });
    p Test if current key combination is #[code Control+b].
    pre: code
      | source.addEventListener('keydown', e => {
      |     map.push(e.key);
      |     if (map.command('Control+b')) {
      |         console.log('Bold!');
      |     }
      | });
    h3 map.commands
    p List of commands to be executed on key combination match.
    pre: code
      | // Simple function
      | map.commands.bold = function() {
      |     // Your `bold` function goes here&hellip;
      |     return false; // Return `false` to tell the event that it has to prevent the default effect
      | };
      |
      | // Function with argument(s)
      | map.commands.insertLink = function(href = 'http://') {
      |     // Your `insertLink` function goes here&hellip;
      |     // Return `void` will be normalized into `true` by `map.fire()` method.
      | };
    p Example context usage, using #[a(href='../text-editor') @taufik-nurrohman/text-editor]:
    pre: code
      | import K from '@taufik-nurrohman/key';
      | import TE from '@taufik-nurrohman/text-editor';
      |
      | const editor = new TE(document.querySelector('textarea'));
      | const map = new K(editor);
      |
      | map.commands.bold = function() {
      |     return this.wrap('&lt;b&gt;', '&lt;/b&gt;'), false; // `this` refers to the `editor`
      | };
    h3 map.fire(command)
    p Execute command data returned by #[code map.test()] method.
    pre: code
      | // &hellip;
      | let command = map.command();
      | if (command) {
      |     let value = map.fire(command);
      |     if (false === value) {
      |         e.preventDefault();
      |     } else if (null === value) {
      |         console.error('Unknown command:', command);
      |     }
      | }
    h3 map.keys
    p List of key combination with its command that will be returned by #[code map.test()]. Key names follow the #[a(href='https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values' rel='nofollow' target='_blank') #[code KeyboardEvent.prototype.key]] specification.
    pre: code
      | // Anonymous function
      | map.keys['Control-b'] = function() {
      |     return this.wrap('&lt;b&gt;', '&lt;/b&gt;'), false;
      | };
      |
      | // Named function without argument(s)
      | map.keys['Control-b'] = 'bold'; // This will execute `map.commands.bold` command if available
      |
      | // Named function with argument(s)
      | map.keys['Control-k'] = ['insertLink', ['http://']]; // This will execute `map.commands.insertLink` command if available
    h3 map.pull(key)
    p Remove key from the queue.
    pre: code
      | source.addEventListener('blur', e => map.pull());
      | source.addEventListener('input', e => map.pull());
      | source.addEventListener('keyup', e => map.pull(e.key));
    h3 map.push(key)
    p Add key to the queue.
    pre: code
      | source.addEventListener('keydown', e => map.push(e.key));
    h3 map.toString()
    p Return the current key combination.
    pre: code
      | source.addEventListener('keydown', e => {
      |     map.push(e.key);
      |     console.info(map + "");
      | });
    h2 License
    p Use it for free, pay if you get paid. So, you&rsquo;ve just benefited financially after using this project? It&rsquo;s a good idea to #[a(href='https://paypal.me/tatautaufik' target='_blank') share a little financial support] with this open source project too. Your support will motivate me to do any further development, as well as to provide voluntary support to overcome problems related to this project.
    p Thank you! ❤️
  footer
    hr
    p
      != '&copy; ' + year + ' '
      a(href='/') Taufik Nurrohman