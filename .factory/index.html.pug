extends _index.pug

block state
  - const scripts = ['index.js']
  - const styles = ['../layout/index.min.css']
  - const theme = '#000'
  - const title = 'Key ' + version

block script
  script
    | const map = new Key;
    | const self = document.querySelector('#in'),
    |       test = document.querySelector('#out');
    |
    | map.commands.bold = function () {
    |     return console.log('Bold function goes here…'), false;
    | };
    |
    | map.commands.insertLink = function (href) {
    |     let value = window.prompt('URL:', href);
    |     if (value) {
    |         console.log('Link function goes here…');
    |         console.info('Current link value is: ' + value);
    |     }
    |     return false;
    | };
    |
    | map.keys['Control-a'] = function () {};
    | map.keys['Control-b'] = 'bold';
    | map.keys['Control-c'] = function () {};
    | map.keys['Control-i'] = 'italic';
    | map.keys['Control-k'] = ['insertLink', ['http://']];
    | map.keys['Control-v'] = function () {};
    | map.keys['Control-x'] = function () {};
    |
    | self.addEventListener('blur', e => map.pull());
    | self.addEventListener('input', e => map.pull());
    |
    | let wait;
    | self.addEventListener('keydown', e => {
    |     map.push(e.key);
    |     let command = map.command();
    |     let value = map.fire(command);
    |     test.style.color = null !== value ? '#090' : '#900';
    |     test.innerHTML = '<b>' + map + '</b> (command' + (null !== value ? "" : ' does not') + ' exist)';
    |     if (false === value) {
    |         e.preventDefault();
    |     }
    |     wait && clearTimeout(wait);
    |     wait = setTimeout(() => map.pull(), 1000);
    | });
    |
    | self.addEventListener('keyup', e => map.pull(e.key));

block style
  style
    | body {
    |   margin-left: auto;
    |   margin-right: auto;
    |   max-width: 60rem;
    | }

block content
  p(role='alert') Do you like this project? Please support my #[a(href='https://github.com/mecha-cms') Mecha CMS] project too. Thank you!
  header
    hgroup
      h1= title
      p Micro JavaScript #[em hot-key]/#[em key-map] system.
  main
    p
      input#in(type='text')
    p
      span#out Type something&hellip;
    h2#usage
      a(href='#usage') #
      = ' Usage'
    h3 Browser
    pre: code
      | &lt;!DOCTYPE html&gt;
      | &lt;html dir="ltr"&gt;
      |   &lt;head&gt;
      |     &lt;meta charset="utf-8"&gt;
      |   &lt;/head&gt;
      |   &lt;body&gt;
      |     &lt;p&gt;
      |       &lt;textarea&gt;&lt;/textarea&gt;
      |     &lt;/p&gt;
      |     &lt;script src="#[a(href='index.min.js' target='_blank') ./index.min.js]"&gt;&lt;/script&gt;
      |     &lt;script&gt;
      |       const map = new Key;
      |       const self = document.querySelector('textarea');
      |       self.addEventListener('blur', e =&gt; map.pull()); // Reset!
      |       self.addEventListener('input', e =&gt; map.pull()); // Reset!
      |       let wait;
      |       self.addEventListener('keydown', e =&gt; {
      |           map.push(e.key);
      |           console.log(map.toString());
      |           wait && clearTimeout(wait);
      |           wait = setTimeout(() => map.pull(), 1000); // Reset after 1 second idle!
      |       });
      |       self.addEventListener('keyup', e =&gt; map.pull(e.key));
      |     &lt;/script&gt;
      |   &lt;/body&gt;
      | &lt;/html&gt;
    h3 Node.js
    p Functions and methods in this application are mostly native JavaScript and are intended for use by the browser. Node.js doesn&rsquo;t know about the DOM, so this kind of practice will probably be used more often to build new browser packages than to be used directly in the Node.js server.
    h4 CommonJS
    pre: code
      | const Key = require('@taufik-nurrohman/key').default;
      |
      | const map = new Key;
    h4 ECMAScript
    pre: code
      | import Key from '@taufik-nurrohman/key';
      |
      | const map = new Key;
    h2#tweaks
      a(href='#tweaks') #
      = ' Tweaks'
    ul
      li: a(href='tweak/sequence.html') Sequential Keys
    h2#constructor
      a(href='#constructor') #
      = ' Constructor'
    pre: code const map = new Key(self);
    h2#parameters
      a(href='#parameters') #
      = ' Parameters'
    h3: code self
    p The object that will becomes the #[code this] context in the command.
    h2#methods
      a(href='#methods') #
      = ' Methods'
    h3 Instance Methods
    p Instance methods are methods available through the results of a #[code Key] construct.
    h4: code map.command()
    p Checks if current key combination exists.
    pre: code
      | self.addEventListener('keydown', e => {
      |     map.push(e.key);
      |     let command = map.command();
      |     if (command) {
      |         console.log(command);
      |     }
      | });
    p Checks if current key combination is #[code Control-b].
    pre: code
      | self.addEventListener('keydown', e => {
      |     map.push(e.key);
      |     if (map.command('Control-b')) {
      |         console.log('Bold!');
      |     }
      | });
    p Example context usage, using #[a(href='../text-editor') @taufik-nurrohman/text-editor] application:
    pre: code
      | import Key from '@taufik-nurrohman/key';
      | import TextEditor from '@taufik-nurrohman/text-editor';
      |
      | const editor = new TextEditor(document.querySelector('textarea'));
      | const map = new Key(editor);
      |
      | map.commands.bold = function () {
      |     return this.wrap('&lt;b&gt;', '&lt;/b&gt;'), false; // `this` refers to the `editor`
      | };
    h4: code map.fire(command)
    p Executes command data returned by #[code map.command()] method.
    pre: code
      | // &hellip;
      | let command = map.command();
      | if (command) {
      |     let value = map.fire(command);
      |     if (false === value) {
      |         e.preventDefault();
      |     } else if (null === value) {
      |         console.error('Unknown command:', command);
      |     }
      | }
    h4: code map.pull(key)
    p Removes key from the queue.
    pre: code
      | self.addEventListener('blur', e => map.pull());
      | self.addEventListener('input', e => map.pull());
      | self.addEventListener('keyup', e => map.pull(e.key));
    h4: code map.push(key)
    p Adds key to the queue.
    pre: code
      | self.addEventListener('keydown', e => map.push(e.key));
    h4: code map.toString()
    p Returns the current key combination.
    pre: code
      | self.addEventListener('keydown', e => {
      |     map.push(e.key);
      |     console.info(map + "");
      | });
    h2#properties
     a(href='#properties') #
     = ' Properties'
    h3 Instance Properties
    p Instance properties are properties available through the results of a #[code Key] construct.
    h4: code map.commands
    p Returns list of commands to be executed on key combination match.
    pre: code
      | // Simple function
      | map.commands.bold = function () {
      |     // Your `bold` function goes here&hellip;
      |     return false; // Return `false` to tell the event that it has to prevent the default effect
      | };
      |
      | // Function with argument(s)
      | map.commands.insertLink = function (href = 'http://') {
      |     // Your `insertLink` function goes here&hellip;
      |     // Return `void` will be normalized into `true` by `map.fire()` method.
      | };
    h4: code map.keys
    p Returns list of key combination with its command that will be returned by #[code map.command()]. Key names follow the #[a(href='https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values' rel='nofollow' target='_blank') #[code KeyboardEvent.prototype.key]] specification.
    pre: code
      | // Anonymous function
      | map.keys['Control-b'] = function () {
      |     return this.wrap('&lt;b&gt;', '&lt;/b&gt;'), false;
      | };
      |
      | // Named function without argument(s)
      | map.keys['Control-b'] = 'bold'; // This will execute `map.commands.bold` command if available
      |
      | // Named function with argument(s)
      | map.keys['Control-k'] = ['insertLink', ['http://']]; // This will execute `map.commands.insertLink` command if available
    h2#license
      a(href='#license') #
      = ' License'
    p Use it for free, pay if you get paid. So, you&rsquo;ve just benefited financially after using this project? It&rsquo;s a good idea to #[a(href='https://paypal.me/tatautaufik' target='_blank') share a little financial support] with this open source project too. Your support will motivate me to do any further development, as well as to provide voluntary support to overcome problems related to this project.
    p Thank you! ❤️
  footer
    hr
    p
      != '&copy; ' + year + ' '
      a(href='/') Taufik Nurrohman